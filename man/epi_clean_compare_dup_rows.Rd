% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epi_clean_compare_dup_rows.R
\name{epi_clean_compare_dup_rows}
\alias{epi_clean_compare_dup_rows}
\title{Compare two rows which may be duplicated}
\usage{
epi_clean_compare_dup_rows(
  df_dups = NULL,
  val_id = "1",
  col_id = "",
  sub_index_1 = 1,
  sub_index_2 = 2,
  allowAll = TRUE,
  ...
)
}
\arguments{
\item{df_dups}{a data frame with duplicated entries to compare}

\item{val_id}{is a value that is thought to be duplicated (eg a repeating row ID),
passed as a string. Grep is used to search for duplicates without regex with
fixed = TRUE}

\item{col_id}{is a string to indicate an ID column}

\item{sub_index_1}{default = 1}

\item{sub_index_2}{default = 2}

\item{allowAll}{compare::compare option}

\item{...}{pass any other options from compare::compare()}
}
\value{
returns a list object with the differing columns ('differing_cols'),
their names ('col_names') and the duplicated indices
}
\description{
Compare two rows which may have duplicated information.
epi_clean_compare_dup_rows() uses compare::compare() for possibly duplicated rows.
compare::compare allows all transformations, sorting, etc. so can be loose.
This function is intended to make manual inspection easier,
compare::compare can miss differences though so care is needed.
}
\examples{

\dontrun{
# Data frame object with rows thought to have duplicated entries:
check_dups
# Specify the row ID to grep where duplicate values are expected:
val_id <- '2'
comp <- epi_clean_compare_dup_rows(check_dups, val_id, 'var_id', 1, 2)
comp
View(t(check_dups[comp$duplicate_indices, ]))
View(t(check_dups[comp$duplicate_indices, comp$differing_cols]))}

}
\seealso{
\code{\link[compare]{compare}}, \code{\link[base]{grepl}}
}
\author{
Antonio Berlanga-Taylor \if{html}{\out{<\url{https://github.com/AntonioJBT/episcout}>}}
}
